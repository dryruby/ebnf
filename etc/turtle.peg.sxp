    (
     (rule turtleDoc (star statement))
     (rule statement (alt directive _statement_1))
     (rule _statement_1 (seq triples '.'))
     (rule directive (alt prefixID base sparqlPrefix sparqlBase))
     (rule prefixID (seq '@prefix' PNAME_NS IRIREF '.'))
     (rule base (seq '@base' IRIREF '.'))
     (rule sparqlPrefix (seq "PREFIX" PNAME_NS IRIREF))
     (rule sparqlBase (seq "BASE" IRIREF))
     (rule triples (alt _triples_1 _triples_2))
     (rule _triples_1 (seq subject predicateObjectList))
     (rule _triples_2 (seq blankNodePropertyList _triples_3))
     (rule _triples_3 (opt predicateObjectList))
     (rule predicateObjectList (seq verb objectList _predicateObjectList_1))
     (rule _predicateObjectList_1 (star _predicateObjectList_2))
     (rule _predicateObjectList_2 (seq ';' _predicateObjectList_3))
     (rule _predicateObjectList_3 (opt _predicateObjectList_4))
     (rule _predicateObjectList_4 (seq verb objectList))
     (rule objectList (seq object _objectList_1))
     (rule _objectList_1 (star _objectList_2))
     (rule _objectList_2 (seq ',' object))
     (rule verb (alt predicate 'a'))
     (rule subject (alt iri BlankNode collection))
     (rule predicate (seq iri))
     (rule object (alt iri BlankNode collection blankNodePropertyList literal))
     (rule literal (alt RDFLiteral NumericLiteral BooleanLiteral))
     (rule blankNodePropertyList (seq '[' predicateObjectList ']'))
     (rule collection (seq '(' _collection_1 ')'))
     (rule _collection_1 (star object))
     (rule NumericLiteral (alt INTEGER DECIMAL DOUBLE))
     (rule RDFLiteral (seq String _RDFLiteral_1))
     (rule _RDFLiteral_1 (opt _RDFLiteral_2))
     (rule _RDFLiteral_2 (alt LANGTAG _RDFLiteral_3))
     (rule _RDFLiteral_3 (seq '^^' iri))
     (rule BooleanLiteral (alt 'true' 'false'))
     (rule String
      (alt STRING_LITERAL_QUOTE STRING_LITERAL_SINGLE_QUOTE
       STRING_LITERAL_LONG_SINGLE_QUOTE STRING_LITERAL_LONG_QUOTE ))
     (rule iri (alt IRIREF PrefixedName))
     (rule PrefixedName (alt PNAME_LN PNAME_NS))
     (rule BlankNode (alt BLANK_NODE_LABEL ANON))
     (terminals _terminals (seq))
     (terminal IRIREF (seq '<' _IRIREF_1 '>'))
     (terminal _IRIREF_1 (star _IRIREF_2))
     (terminal _IRIREF_2 (alt _IRIREF_3 UCHAR))
     (terminal _IRIREF_3 (range "^#x00-#x20<>\"{}|^`\\"))
     (terminal PNAME_NS (seq _PNAME_NS_1 ':'))
     (terminal _PNAME_NS_1 (opt PN_PREFIX))
     (terminal PNAME_LN (seq PNAME_NS PN_LOCAL))
     (terminal BLANK_NODE_LABEL (seq '_:' _BLANK_NODE_LABEL_1 _BLANK_NODE_LABEL_2))
     (terminal _BLANK_NODE_LABEL_1 (alt PN_CHARS_U _BLANK_NODE_LABEL_3))
     (terminal _BLANK_NODE_LABEL_3 (range "0-9"))
     (terminal _BLANK_NODE_LABEL_2 (opt _BLANK_NODE_LABEL_4))
     (terminal _BLANK_NODE_LABEL_4 (seq _BLANK_NODE_LABEL_5 PN_CHARS))
     (terminal _BLANK_NODE_LABEL_5 (star _BLANK_NODE_LABEL_6))
     (terminal _BLANK_NODE_LABEL_6 (alt PN_CHARS '.'))
     (terminal LANGTAG (seq '@' _LANGTAG_1 _LANGTAG_2))
     (terminal _LANGTAG_1 (plus _LANGTAG_3))
     (terminal _LANGTAG_3 (range "a-zA-Z"))
     (terminal _LANGTAG_2 (star _LANGTAG_4))
     (terminal _LANGTAG_4 (seq '-' _LANGTAG_5))
     (terminal _LANGTAG_5 (plus _LANGTAG_6))
     (terminal _LANGTAG_6 (range "a-zA-Z0-9"))
     (terminal INTEGER (seq _INTEGER_1 _INTEGER_2))
     (terminal _INTEGER_1 (opt _INTEGER_3))
     (terminal _INTEGER_3 (range "+-"))
     (terminal _INTEGER_2 (plus _INTEGER_4))
     (terminal _INTEGER_4 (range "0-9"))
     (terminal DECIMAL (seq _DECIMAL_1 _DECIMAL_2))
     (terminal _DECIMAL_1 (opt _DECIMAL_3))
     (terminal _DECIMAL_3 (range "+-"))
     (terminal _DECIMAL_2 (seq _DECIMAL_4 '.' _DECIMAL_5))
     (terminal _DECIMAL_4 (star _DECIMAL_6))
     (terminal _DECIMAL_6 (range "0-9"))
     (terminal _DECIMAL_5 (plus _DECIMAL_7))
     (terminal _DECIMAL_7 (range "0-9"))
     (terminal DOUBLE (seq _DOUBLE_1 _DOUBLE_2))
     (terminal _DOUBLE_1 (opt _DOUBLE_3))
     (terminal _DOUBLE_3 (range "+-"))
     (terminal _DOUBLE_2 (alt _DOUBLE_4 _DOUBLE_5 _DOUBLE_6))
     (terminal _DOUBLE_4 (seq _DOUBLE_7 '.' _DOUBLE_8 EXPONENT))
     (terminal _DOUBLE_7 (plus _DOUBLE_9))
     (terminal _DOUBLE_9 (range "0-9"))
     (terminal _DOUBLE_8 (star _DOUBLE_10))
     (terminal _DOUBLE_10 (range "0-9"))
     (terminal _DOUBLE_5 (seq '.' _DOUBLE_11 EXPONENT))
     (terminal _DOUBLE_11 (plus _DOUBLE_12))
     (terminal _DOUBLE_12 (range "0-9"))
     (terminal _DOUBLE_6 (seq _DOUBLE_13 EXPONENT))
     (terminal _DOUBLE_13 (plus _DOUBLE_14))
     (terminal _DOUBLE_14 (range "0-9"))
     (terminal EXPONENT (seq _EXPONENT_1 _EXPONENT_2 _EXPONENT_3))
     (terminal _EXPONENT_1 (range "eE"))
     (terminal _EXPONENT_2 (opt _EXPONENT_4))
     (terminal _EXPONENT_4 (range "+-"))
     (terminal _EXPONENT_3 (plus _EXPONENT_5))
     (terminal _EXPONENT_5 (range "0-9"))
     (terminal STRING_LITERAL_QUOTE (seq '"' _STRING_LITERAL_QUOTE_1 '"'))
     (terminal _STRING_LITERAL_QUOTE_1 (star _STRING_LITERAL_QUOTE_2))
     (terminal _STRING_LITERAL_QUOTE_2 (alt _STRING_LITERAL_QUOTE_3 ECHAR UCHAR))
     (terminal _STRING_LITERAL_QUOTE_3 (range "^#x22#x5C#xA#xD"))
     (terminal STRING_LITERAL_SINGLE_QUOTE (seq "'" _STRING_LITERAL_SINGLE_QUOTE_1 "'"))
     (terminal _STRING_LITERAL_SINGLE_QUOTE_1 (star _STRING_LITERAL_SINGLE_QUOTE_2))
     (terminal _STRING_LITERAL_SINGLE_QUOTE_2
      (alt _STRING_LITERAL_SINGLE_QUOTE_3 ECHAR UCHAR))
     (terminal _STRING_LITERAL_SINGLE_QUOTE_3 (range "^#x27#x5C#xA#xD"))
     (terminal STRING_LITERAL_LONG_SINGLE_QUOTE
      (seq "'''" _STRING_LITERAL_LONG_SINGLE_QUOTE_1 "'''"))
     (terminal _STRING_LITERAL_LONG_SINGLE_QUOTE_1
      (star _STRING_LITERAL_LONG_SINGLE_QUOTE_2))
     (terminal _STRING_LITERAL_LONG_SINGLE_QUOTE_2
      (seq _STRING_LITERAL_LONG_SINGLE_QUOTE_3 _STRING_LITERAL_LONG_SINGLE_QUOTE_4))
     (terminal _STRING_LITERAL_LONG_SINGLE_QUOTE_3
      (opt _STRING_LITERAL_LONG_SINGLE_QUOTE_5))
     (terminal _STRING_LITERAL_LONG_SINGLE_QUOTE_5 (alt "'" "''"))
     (terminal _STRING_LITERAL_LONG_SINGLE_QUOTE_4
      (alt _STRING_LITERAL_LONG_SINGLE_QUOTE_6 ECHAR UCHAR))
     (terminal _STRING_LITERAL_LONG_SINGLE_QUOTE_6 (range "^'\\"))
     (terminal STRING_LITERAL_LONG_QUOTE (seq '"""' _STRING_LITERAL_LONG_QUOTE_1 '"""'))
     (terminal _STRING_LITERAL_LONG_QUOTE_1 (star _STRING_LITERAL_LONG_QUOTE_2))
     (terminal _STRING_LITERAL_LONG_QUOTE_2
      (seq _STRING_LITERAL_LONG_QUOTE_3 _STRING_LITERAL_LONG_QUOTE_4))
     (terminal _STRING_LITERAL_LONG_QUOTE_3 (opt _STRING_LITERAL_LONG_QUOTE_5))
     (terminal _STRING_LITERAL_LONG_QUOTE_5 (alt '"' '""'))
     (terminal _STRING_LITERAL_LONG_QUOTE_4
      (alt _STRING_LITERAL_LONG_QUOTE_6 ECHAR UCHAR))
     (terminal _STRING_LITERAL_LONG_QUOTE_6 (range "^\"\\"))
     (terminal UCHAR (alt _UCHAR_1 _UCHAR_2))
     (terminal _UCHAR_1 (seq 'u' HEX HEX HEX HEX))
     (terminal _UCHAR_2 (seq 'U' HEX HEX HEX HEX HEX HEX HEX HEX))
     (terminal ECHAR (seq '\\' _ECHAR_1))
     (terminal _ECHAR_1 (range "tbnrf\"'"))
     (terminal NIL (seq '(' _NIL_1 ')'))
     (terminal _NIL_1 (star WS))
     (terminal WS (alt _WS_1 _WS_2 _WS_3 _WS_4))
     (terminal _WS_1 (hex "#x20"))
     (terminal _WS_2 (hex "#x9"))
     (terminal _WS_3 (hex "#xD"))
     (terminal _WS_4 (hex "#xA"))
     (terminal ANON (seq '[' _ANON_1 ']'))
     (terminal _ANON_1 (star WS))
     (terminal PN_CHARS_BASE
      (alt _PN_CHARS_BASE_1 _PN_CHARS_BASE_2 _PN_CHARS_BASE_3 _PN_CHARS_BASE_4
       _PN_CHARS_BASE_5 _PN_CHARS_BASE_6 _PN_CHARS_BASE_7 _PN_CHARS_BASE_8
       _PN_CHARS_BASE_9 _PN_CHARS_BASE_10 _PN_CHARS_BASE_11 _PN_CHARS_BASE_12
       _PN_CHARS_BASE_13 _PN_CHARS_BASE_14 ))
     (terminal _PN_CHARS_BASE_1 (range "A-Z"))
     (terminal _PN_CHARS_BASE_2 (range "a-z"))
     (terminal _PN_CHARS_BASE_3 (range "#x00C0-#x00D6"))
     (terminal _PN_CHARS_BASE_4 (range "#x00D8-#x00F6"))
     (terminal _PN_CHARS_BASE_5 (range "#x00F8-#x02FF"))
     (terminal _PN_CHARS_BASE_6 (range "#x0370-#x037D"))
     (terminal _PN_CHARS_BASE_7 (range "#x037F-#x1FFF"))
     (terminal _PN_CHARS_BASE_8 (range "#x200C-#x200D"))
     (terminal _PN_CHARS_BASE_9 (range "#x2070-#x218F"))
     (terminal _PN_CHARS_BASE_10 (range "#x2C00-#x2FEF"))
     (terminal _PN_CHARS_BASE_11 (range "#x3001-#xD7FF"))
     (terminal _PN_CHARS_BASE_12 (range "#xF900-#xFDCF"))
     (terminal _PN_CHARS_BASE_13 (range "#xFDF0-#xFFFD"))
     (terminal _PN_CHARS_BASE_14 (range "#x10000-#xEFFFF"))
     (terminal PN_CHARS_U (alt PN_CHARS_BASE '_'))
     (terminal PN_CHARS
      (alt PN_CHARS_U '-' _PN_CHARS_1 _PN_CHARS_2 _PN_CHARS_3 _PN_CHARS_4))
     (terminal _PN_CHARS_1 (range "0-9"))
     (terminal _PN_CHARS_2 (hex "#x00B7"))
     (terminal _PN_CHARS_3 (range "#x0300-#x036F"))
     (terminal _PN_CHARS_4 (range "#x203F-#x2040"))
     (terminal PN_PREFIX (seq PN_CHARS_BASE _PN_PREFIX_1))
     (terminal _PN_PREFIX_1 (opt _PN_PREFIX_2))
     (terminal _PN_PREFIX_2 (seq _PN_PREFIX_3 PN_CHARS))
     (terminal _PN_PREFIX_3 (star _PN_PREFIX_4))
     (terminal _PN_PREFIX_4 (alt PN_CHARS '.'))
     (terminal PN_LOCAL (seq _PN_LOCAL_1 _PN_LOCAL_2))
     (terminal _PN_LOCAL_1 (alt PN_CHARS_U ':' _PN_LOCAL_3 PLX))
     (terminal _PN_LOCAL_3 (range "0-9"))
     (terminal _PN_LOCAL_2 (opt _PN_LOCAL_4))
     (terminal _PN_LOCAL_4 (seq _PN_LOCAL_5 _PN_LOCAL_6))
     (terminal _PN_LOCAL_5 (star _PN_LOCAL_7))
     (terminal _PN_LOCAL_7 (alt PN_CHARS '.' ':' PLX))
     (terminal _PN_LOCAL_6 (alt PN_CHARS ':' PLX))
     (terminal PLX (alt PERCENT PN_LOCAL_ESC))
     (terminal PERCENT (seq '%' HEX HEX))
     (terminal HEX (alt _HEX_1 _HEX_2 _HEX_3))
     (terminal _HEX_1 (range "0-9"))
     (terminal _HEX_2 (range "A-F"))
     (terminal _HEX_3 (range "a-f"))
     (terminal PN_LOCAL_ESC (seq '\\' _PN_LOCAL_ESC_1))
     (terminal _PN_LOCAL_ESC_1
      (alt '_' '~' '.' '-' '!' '$' '&' "'" '(' ')' '*' '+' ',' ';' '=' '/' '?' '#'
       '@' '%' )) )
